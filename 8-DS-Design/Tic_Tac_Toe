class TicTacToe:

    def __init__(self, n: int):
        """
        Initialize your data structure here.
        """
        self.n = n
        self.rows, self.cols, self.diag, self.antidiag = [0] * n, [0] * n, 0, 0

    def move(self, row: int, col: int, player: int) -> int:
        """
        Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins.
        """
        score = (player * 2) - 3  # Trick! Player:1 score becomes -1 and Player:2 score becomes +1
        self.rows[row] += score
        self.cols[col] += score
        if row == col:
            self.diag += score
        if (row + col) == self.n - 1:
            self.antidiag += score

        # New score updated for that row, that col, that diag, that antidiag.
        return self.checkWin(row, col)

    def checkWin(self, row, col):
        # Player:1, score:+1 so look for +n in any row, col, diag, antidiag
        if self.n in [self.rows[row], self.cols[col], self.diag, self.antidiag]:
            return 2
        # Player:1, score:-1 so look for -n in any row, col, diag, antidiag
        elif -self.n in [self.rows[row], self.cols[col], self.diag, self.antidiag]:
            return 1
        return 0

# Your TicTacToe object will be instantiated and called as such:
# obj = TicTacToe(n)
# param_1 = obj.move(row,col,player)